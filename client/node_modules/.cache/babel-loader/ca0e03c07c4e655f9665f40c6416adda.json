{"ast":null,"code":"var _jsxFileName = \"/Users/anuragsingh/Desktop/interbase/client/src/components/App.js\";\nimport React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport { notyConnect } from '@kiyasov/noty';\nimport '../assets/css/App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.showNoty = (title, text, type) => {\n      this.props.noty.show({\n        title,\n        text,\n        type\n      });\n    };\n\n    this.login = async (username, password) => {\n      const trylogin = await fetch('/login', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n\n      if (trylogin.status === 401) {\n        // alert('Invalid username password!');\n        this.showNoty('Unauthorized', 'Invalid username password!', 'error');\n      } else {\n        const loginjson = await trylogin.json();\n        console.log(loginjson);\n\n        if (loginjson.isLoggedIn == true) {\n          alert('logging.. in!');\n          this.setState({\n            isLoggedIn: true\n          });\n        }\n      }\n    };\n\n    this.register = async (username, password, repeatpassword) => {\n      console.log(username, password, repeatpassword);\n\n      if (password !== repeatpassword) {\n        alert('passwords do not match');\n      } else {\n        const tryregister = await fetch('/register', {\n          method: 'post',\n          body: JSON.stringify({\n            username,\n            password\n          }),\n          headers: {\n            'content-type': 'application/json'\n          }\n        });\n        const tryregisterjson = await tryregister.json();\n\n        if (tryregisterjson.message === \"success\") {\n          alert('New registration successfull');\n        } else if (tryregisterjson.message === \"error\") {\n          alert('some error in registering!');\n        } else if (tryregisterjson.message == \"username already occupied\") {\n          alert('already exists!');\n        }\n      }\n    };\n\n    this.logout = () => {\n      const tryLogout = fetch('/logout', {\n        method: 'post'\n      });\n      this.setState({\n        isLoggedIn: false\n      });\n    };\n\n    this.state = {\n      isLoggedIn: false\n    };\n  }\n\n  async componentDidMount() {\n    const login = await fetch('/isAuthenticated', {\n      method: 'post'\n    });\n    const isLoggedInState = await login.json();\n    this.setState({\n      isLoggedIn: isLoggedInState\n    });\n  } //function to show notifications\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      logout: this.logout,\n      isLoggedIn: this.state.isLoggedIn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"condition-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, this.state.isLoggedIn && /*#__PURE__*/React.createElement(MainContent2, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 37\n      }\n    }), this.state.isLoggedIn === false && /*#__PURE__*/React.createElement(MainContent, {\n      login: this.login,\n      register: this.register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 47\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/anuragsingh/Desktop/interbase/client/src/components/App.js"],"names":["React","Navbar","MainContent","MainContent2","notyConnect","App","Component","constructor","showNoty","title","text","type","props","noty","show","login","username","password","trylogin","fetch","method","body","JSON","stringify","headers","status","loginjson","json","console","log","isLoggedIn","alert","setState","register","repeatpassword","tryregister","tryregisterjson","message","logout","tryLogout","state","componentDidMount","isLoggedInState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport { notyConnect } from '@kiyasov/noty';\nimport '../assets/css/App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n    }\n  }\n\n  async componentDidMount() {\n    const login = await fetch('/isAuthenticated', { method: 'post' });\n    const isLoggedInState = await login.json();\n    this.setState({\n      isLoggedIn: isLoggedInState\n    })\n  }\n\n  //function to show notifications\n  showNoty = (title , text, type) => {\n    this.props.noty.show({ title, text, type})\n  }\n\n  //function to login the user\n  login = async (username, password) => {\n    const trylogin = await fetch('/login', {\n      method: 'post',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n\n    if (trylogin.status === 401) {\n      // alert('Invalid username password!');\n      this.showNoty('Unauthorized','Invalid username password!','error');\n    }\n    else {\n      const loginjson = await trylogin.json();\n      console.log(loginjson);\n      if (loginjson.isLoggedIn == true) {\n        alert('logging.. in!');\n        this.setState({\n          isLoggedIn:true\n        })\n      }\n    }\n  }\n\n  //this fucntion sends ajax call to register a new User\n  register = async (username, password, repeatpassword) => {\n    console.log(username, password, repeatpassword);\n    if (password !== repeatpassword) {\n      alert('passwords do not match');\n    }\n    else {\n      const tryregister = await fetch('/register', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      })\n\n      const tryregisterjson = await tryregister.json();\n      if (tryregisterjson.message === \"success\") {\n        alert('New registration successfull');\n      }\n      else if (tryregisterjson.message === \"error\") {\n        alert('some error in registering!');\n      }\n      else if(tryregisterjson.message==\"username already occupied\"){\n        alert('already exists!');\n      }\n    }\n  }\n  //this function send logout request\n  logout = () => {\n    const tryLogout = fetch('/logout', {\n      method: 'post'\n    });\n    this.setState({\n      isLoggedIn: false\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar logout={this.logout} isLoggedIn={this.state.isLoggedIn} />\n        <div className=\"condition-div\">\n          {this.state.isLoggedIn && <MainContent2 />}\n          {this.state.isLoggedIn === false && <MainContent  login={this.login} register={this.register} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
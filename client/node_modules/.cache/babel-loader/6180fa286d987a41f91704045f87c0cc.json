{"ast":null,"code":"var _jsxFileName = \"/Users/anuragsingh/Desktop/interbase/client/src/components/App.js\";\nimport React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport '../assets/css/App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.notify = (type, message) => {\n      switch (type) {\n        case 'error':\n          {\n            toast.error(message);\n            break;\n          }\n\n        case 'success':\n          {\n            toast.success(message);\n            break;\n          }\n\n        case 'warn':\n          {\n            toast.warn(message);\n            break;\n          }\n      }\n    };\n\n    this.login = async (username, password) => {\n      const trylogin = await fetch('/login', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n\n      if (trylogin.status === 401) {\n        this.notify('error', 'Invalid username password!');\n      } else {\n        const loginjson = await trylogin.json();\n        console.log(loginjson);\n\n        if (loginjson.isLoggedIn == true) {\n          this.notify('success', 'Welcome back :)');\n          this.setState({\n            isLoggedIn: true\n          });\n        }\n      }\n    };\n\n    this.register = async (username, password, repeatpassword) => {\n      console.log(username, password, repeatpassword);\n\n      if (password !== repeatpassword) {\n        this.notify('warn', 'Passwords do not match');\n      } else {\n        const tryregister = await fetch('/register', {\n          method: 'post',\n          body: JSON.stringify({\n            username,\n            password\n          }),\n          headers: {\n            'content-type': 'application/json'\n          }\n        });\n        const tryregisterjson = await tryregister.json();\n\n        if (tryregisterjson.message === \"success\") {\n          this.notify('success', 'New registration successfull :)');\n        } else if (tryregisterjson.message === \"error\") {\n          this.notify('error', 'New registration failed :/');\n        } else if (tryregisterjson.message == \"username already occupied\") {\n          this.notify('warn', 'Username already taken :/');\n        }\n      }\n    };\n\n    this.logout = () => {\n      const tryLogout = fetch('/logout', {\n        method: 'post'\n      });\n      this.notify('success', 'Goodbye :)');\n      this.setState({\n        isLoggedIn: false\n      });\n    };\n\n    this.addstudent = async (name, batch, dsascore, wdscore, rescore, college, placed) => {\n      let newStudent = await fetch('/students/add', {\n        method: 'post',\n        body: JSON.stringify({\n          name,\n          batch,\n          dsascore,\n          wdscore,\n          rescore,\n          college,\n          placed\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      console.log(newStudent);\n      newStudent = await newStudent.json();\n\n      if (newStudent.message == \"success\") {\n        this.notify('success', 'New student added');\n        this.forceUpdate();\n      } else {\n        this.notify('error', 'Adding student failed');\n      }\n    };\n\n    this.state = {\n      isLoggedIn: false\n    };\n  } //function to create notification\n\n\n  async componentWillMount() {\n    const login = await fetch('/isAuthenticated', {\n      method: 'post'\n    });\n    const isLoggedInState = await login.json();\n    console.log(isLoggedInState);\n    this.setState({\n      isLoggedIn: isLoggedInState\n    });\n  } //function to login the user\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ToastContainer, {\n      position: \"bottom-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Navbar, {\n      logout: this.logout,\n      isLoggedIn: this.state.isLoggedIn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"condition-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, this.state.isLoggedIn && /*#__PURE__*/React.createElement(MainContent2, {\n      addstudent: this.addstudent,\n      notify: this.notify,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 37\n      }\n    }), this.state.isLoggedIn === false && /*#__PURE__*/React.createElement(MainContent, {\n      notify: this.notify,\n      login: this.login,\n      register: this.register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 47\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/anuragsingh/Desktop/interbase/client/src/components/App.js"],"names":["React","Navbar","MainContent","MainContent2","ToastContainer","toast","App","Component","constructor","notify","type","message","error","success","warn","login","username","password","trylogin","fetch","method","body","JSON","stringify","headers","status","loginjson","json","console","log","isLoggedIn","setState","register","repeatpassword","tryregister","tryregisterjson","logout","tryLogout","addstudent","name","batch","dsascore","wdscore","rescore","college","placed","newStudent","forceUpdate","state","componentWillMount","isLoggedInState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport '../assets/css/App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n    }\n  }\n\n  //function to create notification\n  notify = (type, message) => {\n    switch (type) {\n      case 'error': {\n        toast.error(message);\n        break;\n      }\n      case 'success': {\n        toast.success(message);\n        break;\n      }\n      case 'warn': {\n        toast.warn(message);\n        break;\n      }\n    }\n  };\n\n  async componentWillMount() {\n    const login = await fetch('/isAuthenticated', { method: 'post' });\n    const isLoggedInState = await login.json();\n    console.log(isLoggedInState);\n    this.setState({\n      isLoggedIn: isLoggedInState\n    })\n  }\n\n\n\n  //function to login the user\n  login = async (username, password) => {\n    const trylogin = await fetch('/login', {\n      method: 'post',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n\n    if (trylogin.status === 401) {\n      this.notify('error', 'Invalid username password!');\n    }\n    else {\n      const loginjson = await trylogin.json();\n      console.log(loginjson);\n      if (loginjson.isLoggedIn == true) {\n        this.notify('success', 'Welcome back :)');\n        this.setState({\n          isLoggedIn: true\n        })\n      }\n    }\n  }\n\n  //this fucntion sends ajax call to register a new User\n  register = async (username, password, repeatpassword) => {\n    console.log(username, password, repeatpassword);\n    if (password !== repeatpassword) {\n      this.notify('warn', 'Passwords do not match');\n    }\n    else {\n      const tryregister = await fetch('/register', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      })\n\n      const tryregisterjson = await tryregister.json();\n      if (tryregisterjson.message === \"success\") {\n        this.notify('success', 'New registration successfull :)');\n      }\n      else if (tryregisterjson.message === \"error\") {\n        this.notify('error', 'New registration failed :/');\n      }\n      else if (tryregisterjson.message == \"username already occupied\") {\n        this.notify('warn', 'Username already taken :/');\n      }\n    }\n  }\n  //this function send logout request\n  logout = () => {\n    const tryLogout = fetch('/logout', {\n      method: 'post'\n    });\n    this.notify('success', 'Goodbye :)');\n    this.setState({\n      isLoggedIn: false\n    })\n  }\n\n  addstudent = async (name, batch, dsascore, wdscore, rescore, college, placed) => {\n    let newStudent = await fetch('/students/add', {\n      method: 'post',\n      body: JSON.stringify({\n        name,\n        batch,\n        dsascore,\n        wdscore,\n        rescore,\n        college,\n        placed\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n\n    console.log(newStudent);\n    newStudent = await newStudent.json();\n    if(newStudent.message==\"success\"){\n      this.notify('success','New student added');\n      this.forceUpdate();\n\n    }\n    else{\n      this.notify('error','Adding student failed');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ToastContainer position=\"bottom-left\" />\n        <Navbar logout={this.logout} isLoggedIn={this.state.isLoggedIn} />\n        <div className=\"condition-div\">\n          {this.state.isLoggedIn && <MainContent2 addstudent={this.addstudent} notify={this.notify} />}\n          {this.state.isLoggedIn === false && <MainContent notify={this.notify} login={this.login} register={this.register} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/anuragsingh/Desktop/interbase/client/src/components/App.js\";\nimport React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport InterviewList from './InterviewList';\nimport '../assets/css/App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.createInterview = async (company, date) => {\n      let tryCreateInterview = await fetch('/interviews/create', {\n        method: 'post',\n        body: JSON.stringify({\n          company,\n          date\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      let createdInterview = await tryCreateInterview.json();\n      console.log(createdInterview.interview);\n\n      if (createdInterview.message == 'success') {\n        this.getInterviews();\n      }\n    };\n\n    this.getInterviews = async () => {\n      let tryGetInterviews = await fetch('/interviews/getlist', {\n        method: 'post'\n      });\n      let interviews = await tryGetInterviews.json();\n      console.log(interviews);\n\n      if (interviews.message == 'success') {\n        this.setState({\n          interviews: interviews.list\n        });\n      }\n    };\n\n    this.setpage = page => {\n      this.setState({\n        page\n      });\n    };\n\n    this.notify = (type, message) => {\n      switch (type) {\n        case 'error':\n          {\n            toast.error(message);\n            break;\n          }\n\n        case 'success':\n          {\n            toast.success(message);\n            break;\n          }\n\n        case 'warn':\n          {\n            toast.warn(message);\n            break;\n          }\n      }\n    };\n\n    this.login = async (username, password) => {\n      const trylogin = await fetch('/login', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n\n      if (trylogin.status === 401) {\n        this.notify('error', 'Invalid username password!');\n      } else {\n        const loginjson = await trylogin.json();\n        console.log(loginjson);\n\n        if (loginjson.isLoggedIn == true) {\n          this.notify('success', 'Welcome back :)');\n          this.setState({\n            isLoggedIn: true\n          });\n        }\n      }\n    };\n\n    this.register = async (username, password, repeatpassword) => {\n      console.log(username, password, repeatpassword);\n\n      if (password !== repeatpassword) {\n        this.notify('warn', 'Passwords do not match');\n      } else {\n        const tryregister = await fetch('/register', {\n          method: 'post',\n          body: JSON.stringify({\n            username,\n            password\n          }),\n          headers: {\n            'content-type': 'application/json'\n          }\n        });\n        const tryregisterjson = await tryregister.json();\n\n        if (tryregisterjson.message === \"success\") {\n          this.notify('success', 'New registration successfull :)');\n        } else if (tryregisterjson.message === \"error\") {\n          this.notify('error', 'New registration failed :/');\n        } else if (tryregisterjson.message == \"username already occupied\") {\n          this.notify('warn', 'Username already taken :/');\n        }\n      }\n    };\n\n    this.logout = () => {\n      const tryLogout = fetch('/logout', {\n        method: 'post'\n      });\n      this.notify('success', 'Goodbye :)');\n      this.setState({\n        isLoggedIn: false\n      });\n    };\n\n    this.addstudent = async (name, batch, dsascore, wdscore, rescore, college, placed) => {\n      let newStudent = await fetch('/students/add', {\n        method: 'post',\n        body: JSON.stringify({\n          name,\n          batch,\n          courseScores: {\n            DSA: dsascore,\n            WD: wdscore,\n            RE: rescore\n          },\n          college,\n          placed\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      console.log(newStudent);\n      newStudent = await newStudent.json();\n\n      if (newStudent.message == \"success\") {\n        this.notify('success', 'New student added');\n        this.getStudents();\n      } else {\n        this.notify('error', 'Adding student failed');\n      }\n    };\n\n    this.addInterview = async (id, company, date, state) => {\n      let studentId = this.state.students[id]._id;\n      console.log(studentId, company, date, state);\n      let tryAdd = await fetch('/interviews/add', {\n        method: 'post',\n        body: JSON.stringify({\n          company,\n          result: state,\n          date,\n          student: studentId\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      let addedInterview = await tryAdd.json();\n\n      if (addedInterview.message == \"success\") {\n        this.notify('success', 'New Interview Added');\n        this.getStudents();\n      }\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      students: [],\n      interviews: [],\n      page: 2\n    };\n  } //this function creates Interview\n\n\n  async componentWillMount() {\n    this.getStudents();\n    const login = await fetch('/isAuthenticated', {\n      method: 'post',\n      withCredentials: true\n    });\n    const isLoggedInState = await login.json();\n    console.log(isLoggedInState);\n\n    if (isLoggedInState) {\n      this.setState({\n        isLoggedIn: isLoggedInState\n      });\n    }\n  } //function to login the user\n\n\n  async getStudents() {\n    const trystudents = await fetch('/students/list', {\n      method: 'post',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    let students = await trystudents.json();\n    students = JSON.parse(students);\n    console.log(typeof students);\n    this.setState({\n      loading: false,\n      students\n    });\n  } //addInterview function\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ToastContainer, {\n      position: \"bottom-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Navbar, {\n      setpage: this.setpage,\n      logout: this.logout,\n      isLoggedIn: this.state.isLoggedIn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"condition-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }, this.state.isLoggedIn && this.state.page == 1 && /*#__PURE__*/React.createElement(MainContent2, {\n      addInterview: this.addInterview,\n      students: this.state.students,\n      addstudent: this.addstudent,\n      notify: this.notify,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 63\n      }\n    }), this.state.isLoggedIn && this.state.page == 2 && /*#__PURE__*/React.createElement(InterviewList, {\n      students: true,\n      createInterview: this.createInterview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 63\n      }\n    }), this.state.isLoggedIn === false && /*#__PURE__*/React.createElement(MainContent, {\n      notify: this.notify,\n      login: this.login,\n      register: this.register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 47\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/anuragsingh/Desktop/interbase/client/src/components/App.js"],"names":["React","Navbar","MainContent","MainContent2","InterviewList","ToastContainer","toast","App","Component","constructor","createInterview","company","date","tryCreateInterview","fetch","method","body","JSON","stringify","headers","createdInterview","json","console","log","interview","message","getInterviews","tryGetInterviews","interviews","setState","list","setpage","page","notify","type","error","success","warn","login","username","password","trylogin","status","loginjson","isLoggedIn","register","repeatpassword","tryregister","tryregisterjson","logout","tryLogout","addstudent","name","batch","dsascore","wdscore","rescore","college","placed","newStudent","courseScores","DSA","WD","RE","getStudents","addInterview","id","state","studentId","students","_id","tryAdd","result","student","addedInterview","componentWillMount","withCredentials","isLoggedInState","trystudents","parse","loading","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport InterviewList from './InterviewList';\nimport '../assets/css/App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n      students: [],\n      interviews: [],\n      page: 2\n    }\n  }\n\n  //this function creates Interview\n  createInterview = async (company, date) => {\n    let tryCreateInterview = await fetch('/interviews/create', {\n      method: 'post',\n      body: JSON.stringify({\n        company,\n        date\n      }),\n      headers:{\n        'content-type':'application/json'\n      }\n    });\n\n    let createdInterview = await tryCreateInterview.json();\n    console.log(createdInterview.interview);\n    if (createdInterview.message == 'success') {\n      this.getInterviews();\n    }\n\n  }\n\n  //this function gets all the interviews\n  getInterviews = async () => {\n    let tryGetInterviews = await fetch('/interviews/getlist', {\n      method: 'post',\n    })\n\n    let interviews = await tryGetInterviews.json();\n    console.log(interviews);\n    if (interviews.message == 'success') {\n      this.setState({\n        interviews: interviews.list\n      });\n    }\n\n\n  }\n  //this function sets the page\n  setpage = (page) => {\n    this.setState({\n      page\n    })\n  }\n\n  //function to create notification\n  notify = (type, message) => {\n    switch (type) {\n      case 'error': {\n        toast.error(message);\n        break;\n      }\n      case 'success': {\n        toast.success(message);\n        break;\n      }\n      case 'warn': {\n        toast.warn(message);\n        break;\n      }\n    }\n  };\n\n  async componentWillMount() {\n    this.getStudents();\n    const login = await fetch('/isAuthenticated', { method: 'post', withCredentials: true });\n    const isLoggedInState = await login.json();\n    console.log(isLoggedInState);\n    if (isLoggedInState) {\n      this.setState({\n        isLoggedIn: isLoggedInState,\n      })\n    }\n  }\n\n\n\n  //function to login the user\n  login = async (username, password) => {\n    const trylogin = await fetch('/login', {\n      method: 'post',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n\n    if (trylogin.status === 401) {\n      this.notify('error', 'Invalid username password!');\n    }\n    else {\n      const loginjson = await trylogin.json();\n      console.log(loginjson);\n      if (loginjson.isLoggedIn == true) {\n        this.notify('success', 'Welcome back :)');\n        this.setState({\n          isLoggedIn: true\n        })\n      }\n    }\n  }\n\n  //this fucntion sends ajax call to register a new User\n  register = async (username, password, repeatpassword) => {\n    console.log(username, password, repeatpassword);\n    if (password !== repeatpassword) {\n      this.notify('warn', 'Passwords do not match');\n    }\n    else {\n      const tryregister = await fetch('/register', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      })\n\n      const tryregisterjson = await tryregister.json();\n      if (tryregisterjson.message === \"success\") {\n        this.notify('success', 'New registration successfull :)');\n      }\n      else if (tryregisterjson.message === \"error\") {\n        this.notify('error', 'New registration failed :/');\n      }\n      else if (tryregisterjson.message == \"username already occupied\") {\n        this.notify('warn', 'Username already taken :/');\n      }\n    }\n  }\n  //this function send logout request\n  logout = () => {\n    const tryLogout = fetch('/logout', {\n      method: 'post'\n    });\n    this.notify('success', 'Goodbye :)');\n    this.setState({\n      isLoggedIn: false\n    })\n  }\n\n  addstudent = async (name, batch, dsascore, wdscore, rescore, college, placed) => {\n    let newStudent = await fetch('/students/add', {\n      method: 'post',\n      body: JSON.stringify({\n        name,\n        batch,\n        courseScores: {\n          DSA: dsascore,\n          WD: wdscore,\n          RE: rescore\n        },\n        college,\n        placed\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n\n    console.log(newStudent);\n    newStudent = await newStudent.json();\n    if (newStudent.message == \"success\") {\n      this.notify('success', 'New student added');\n      this.getStudents();\n    }\n    else {\n      this.notify('error', 'Adding student failed');\n    }\n  }\n\n  async getStudents() {\n    const trystudents = await fetch('/students/list', {\n      method: 'post',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    let students = await trystudents.json();\n    students = JSON.parse(students);\n    console.log(typeof (students));\n    this.setState({ loading: false, students })\n  }\n\n  //addInterview function\n  addInterview = async (id, company, date, state) => {\n    let studentId = this.state.students[id]._id;\n    console.log(studentId, company, date, state);\n\n    let tryAdd = await fetch('/interviews/add', {\n      method: 'post',\n      body: JSON.stringify({\n        company,\n        result: state,\n        date,\n        student: studentId\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    let addedInterview = await tryAdd.json();\n\n    if (addedInterview.message == \"success\") {\n      this.notify('success', 'New Interview Added');\n      this.getStudents();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ToastContainer position=\"bottom-left\" />\n        <Navbar setpage={this.setpage} logout={this.logout} isLoggedIn={this.state.isLoggedIn} />\n        <div className=\"condition-div\">\n          {(this.state.isLoggedIn && this.state.page == 1) && <MainContent2 addInterview={this.addInterview} students={this.state.students} addstudent={this.addstudent} notify={this.notify} />}\n          {(this.state.isLoggedIn && this.state.page == 2) && <InterviewList students createInterview={this.createInterview} />}\n          {this.state.isLoggedIn === false && <MainContent notify={this.notify} login={this.login} register={this.register} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
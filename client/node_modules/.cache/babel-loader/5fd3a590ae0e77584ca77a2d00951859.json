{"ast":null,"code":"var _jsxFileName = \"/Users/anuragsingh/Desktop/interbase/client/src/components/App.js\";\nimport React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport '../assets/css/App.css';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.createNotification = type => {\n      console.log('Noty function called');\n      return () => {\n        switch (type) {\n          case 'info':\n            NotificationManager.info('Info message');\n            break;\n\n          case 'success':\n            NotificationManager.success('Success message', 'Title here');\n            break;\n\n          case 'warning':\n            NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n            break;\n\n          case 'error':\n            NotificationManager.error('Error message', 'Click me!', 5000, () => {\n              alert('callback');\n            });\n            break;\n        }\n      };\n    };\n\n    this.login = async (username, password) => {\n      const trylogin = await fetch('/login', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n\n      if (trylogin.status === 401) {\n        // alert('Invalid username password!');\n        this.createNotification('error');\n      } else {\n        const loginjson = await trylogin.json();\n        console.log(loginjson);\n\n        if (loginjson.isLoggedIn == true) {\n          alert('logging.. in!');\n          this.setState({\n            isLoggedIn: true\n          });\n        }\n      }\n    };\n\n    this.register = async (username, password, repeatpassword) => {\n      console.log(username, password, repeatpassword);\n\n      if (password !== repeatpassword) {\n        alert('passwords do not match');\n      } else {\n        const tryregister = await fetch('/register', {\n          method: 'post',\n          body: JSON.stringify({\n            username,\n            password\n          }),\n          headers: {\n            'content-type': 'application/json'\n          }\n        });\n        const tryregisterjson = await tryregister.json();\n\n        if (tryregisterjson.message === \"success\") {\n          alert('New registration successfull');\n        } else if (tryregisterjson.message === \"error\") {\n          alert('some error in registering!');\n        } else if (tryregisterjson.message == \"username already occupied\") {\n          alert('already exists!');\n        }\n      }\n    };\n\n    this.logout = () => {\n      const tryLogout = fetch('/logout', {\n        method: 'post'\n      });\n      this.setState({\n        isLoggedIn: false\n      });\n    };\n\n    this.state = {\n      isLoggedIn: false\n    };\n  } //function to create notification\n\n\n  async componentDidMount() {\n    const login = await fetch('/isAuthenticated', {\n      method: 'post'\n    });\n    const isLoggedInState = await login.json();\n    this.setState({\n      isLoggedIn: isLoggedInState\n    });\n  } //function to login the user\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      logout: this.logout,\n      isLoggedIn: this.state.isLoggedIn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"condition-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, this.state.isLoggedIn && /*#__PURE__*/React.createElement(MainContent2, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 37\n      }\n    }), this.state.isLoggedIn === false && /*#__PURE__*/React.createElement(MainContent, {\n      login: this.login,\n      register: this.register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 47\n      }\n    }), /*#__PURE__*/React.createElement(NotificationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/anuragsingh/Desktop/interbase/client/src/components/App.js"],"names":["React","Navbar","MainContent","MainContent2","NotificationContainer","NotificationManager","App","Component","constructor","createNotification","type","console","log","info","success","warning","error","alert","login","username","password","trylogin","fetch","method","body","JSON","stringify","headers","status","loginjson","json","isLoggedIn","setState","register","repeatpassword","tryregister","tryregisterjson","message","logout","tryLogout","state","componentDidMount","isLoggedInState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport '../assets/css/App.css';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n    }\n  }\n\n  //function to create notification\n  createNotification = (type) => {\n    console.log('Noty function called');\n    return () => {\n      switch (type) {\n        case 'info':\n          NotificationManager.info('Info message');\n          break;\n        case 'success':\n          NotificationManager.success('Success message', 'Title here');\n          break;\n        case 'warning':\n          NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n          break;\n        case 'error':\n          NotificationManager.error('Error message', 'Click me!', 5000, () => {\n            alert('callback');\n          });\n          break;\n      }\n    };\n  };\n\n  async componentDidMount() {\n    const login = await fetch('/isAuthenticated', { method: 'post' });\n    const isLoggedInState = await login.json();\n    this.setState({\n      isLoggedIn: isLoggedInState\n    })\n  }\n\n  \n\n  //function to login the user\n  login = async (username, password) => {\n    const trylogin = await fetch('/login', {\n      method: 'post',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n\n    if (trylogin.status === 401) {\n      // alert('Invalid username password!');\n      this.createNotification('error');\n    }\n    else {\n      const loginjson = await trylogin.json();\n      console.log(loginjson);\n      if (loginjson.isLoggedIn == true) {\n        alert('logging.. in!');\n        this.setState({\n          isLoggedIn:true\n        })\n      }\n    }\n  }\n\n  //this fucntion sends ajax call to register a new User\n  register = async (username, password, repeatpassword) => {\n    console.log(username, password, repeatpassword);\n    if (password !== repeatpassword) {\n      alert('passwords do not match');\n    }\n    else {\n      const tryregister = await fetch('/register', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      })\n\n      const tryregisterjson = await tryregister.json();\n      if (tryregisterjson.message === \"success\") {\n        alert('New registration successfull');\n      }\n      else if (tryregisterjson.message === \"error\") {\n        alert('some error in registering!');\n      }\n      else if(tryregisterjson.message==\"username already occupied\"){\n        alert('already exists!');\n      }\n    }\n  }\n  //this function send logout request\n  logout = () => {\n    const tryLogout = fetch('/logout', {\n      method: 'post'\n    });\n    this.setState({\n      isLoggedIn: false\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar logout={this.logout} isLoggedIn={this.state.isLoggedIn} />\n        <div className=\"condition-div\">\n          {this.state.isLoggedIn && <MainContent2 />}\n          {this.state.isLoggedIn === false && <MainContent login={this.login} register={this.register} />}\n          <NotificationContainer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
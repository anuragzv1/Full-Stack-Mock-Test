{"ast":null,"code":"var _jsxFileName = \"/Users/anuragsingh/Desktop/interbase/client/src/components/App.js\";\nimport React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport InterviewList from './InterviewList';\nimport '../assets/css/App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.changeIntState = async (student_id, interview_id, oldstate, newstate) => {\n      console.log(oldstate + \" \" + newstate);\n      let changeState = await fetch('/interviews/changestate', {\n        method: 'post',\n        body: JSON.stringify({\n          student_id,\n          interview_id,\n          oldstate,\n          newstate\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      let changeStateResult = await changeState.json();\n\n      if (changeStateResult.message == 'success') {\n        this.notify('success', 'state change ' + oldstate + '->' + newstate);\n        this.getInterviews();\n      } else {\n        this.notify('error', 'State change failed');\n      }\n    };\n\n    this.createInterview = async (company, date) => {\n      if (company === \"\" || date === \"\") {\n        this.notify('error', 'Date or Company name empty');\n        return;\n      }\n\n      let tryCreateInterview = await fetch('/interviews/create', {\n        method: 'post',\n        body: JSON.stringify({\n          company,\n          date\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      let createdInterview = await tryCreateInterview.json();\n      console.log(createdInterview.interview);\n\n      if (createdInterview.message == 'success') {\n        this.notify('success', 'New ' + company + ' Interview created!');\n        this.getInterviews();\n      } else {\n        this.notify('error', 'Interview creation failed');\n      }\n    };\n\n    this.getInterviews = async () => {\n      let tryGetInterviews = await fetch('/interviews/getlist', {\n        method: 'post'\n      });\n      let interviews = await tryGetInterviews.json();\n      console.log(interviews);\n\n      if (interviews.message == 'success') {\n        this.setState({\n          interviews: interviews.interviews\n        });\n      }\n    };\n\n    this.setpage = page => {\n      this.setState({\n        page\n      });\n    };\n\n    this.notify = (type, message) => {\n      switch (type) {\n        case 'error':\n          {\n            toast.error(message);\n            break;\n          }\n\n        case 'success':\n          {\n            toast.success(message);\n            break;\n          }\n\n        case 'warn':\n          {\n            toast.warn(message);\n            break;\n          }\n      }\n    };\n\n    this.login = async (username, password) => {\n      const trylogin = await fetch('/login', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n\n      if (trylogin.status === 401) {\n        this.notify('error', 'Invalid username password!');\n      } else {\n        const loginjson = await trylogin.json();\n        console.log(loginjson);\n\n        if (loginjson.isLoggedIn == true) {\n          this.notify('success', 'Welcome back :)');\n          this.setState({\n            isLoggedIn: true\n          });\n        }\n      }\n    };\n\n    this.register = async (username, password, repeatpassword) => {\n      console.log(username, password, repeatpassword);\n\n      if (password !== repeatpassword) {\n        this.notify('warn', 'Passwords do not match');\n      } else {\n        const tryregister = await fetch('/register', {\n          method: 'post',\n          body: JSON.stringify({\n            username,\n            password\n          }),\n          headers: {\n            'content-type': 'application/json'\n          }\n        });\n        const tryregisterjson = await tryregister.json();\n\n        if (tryregisterjson.message === \"success\") {\n          this.notify('success', 'New registration successfull :)');\n        } else if (tryregisterjson.message === \"error\") {\n          this.notify('error', 'New registration failed :/');\n        } else if (tryregisterjson.message == \"username already occupied\") {\n          this.notify('warn', 'Username already taken :/');\n        }\n      }\n    };\n\n    this.logout = () => {\n      const tryLogout = fetch('/logout', {\n        method: 'post'\n      });\n      this.notify('success', 'Goodbye :)');\n      this.setState({\n        isLoggedIn: false\n      });\n    };\n\n    this.addstudent = async (name, batch, dsascore, wdscore, rescore, college, placed) => {\n      let newStudent = await fetch('/students/add', {\n        method: 'post',\n        body: JSON.stringify({\n          name,\n          batch,\n          courseScores: {\n            DSA: dsascore,\n            WD: wdscore,\n            RE: rescore\n          },\n          college,\n          placed\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      console.log(newStudent);\n      newStudent = await newStudent.json();\n\n      if (newStudent.message == \"success\") {\n        this.notify('success', 'New student added');\n        this.getStudents();\n      } else {\n        this.notify('error', 'Adding student failed');\n      }\n    };\n\n    this.addInterview = async (id, company, date, state) => {\n      let studentId = this.state.students[id]._id;\n      console.log(studentId, company, date, state);\n      let tryAdd = await fetch('/interviews/add', {\n        method: 'post',\n        body: JSON.stringify({\n          company,\n          result: state,\n          date,\n          student: studentId\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      let addedInterview = await tryAdd.json();\n\n      if (addedInterview.message == \"success\") {\n        this.notify('success', 'New Interview Added');\n        this.getStudents();\n      }\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      students: [],\n      interviews: [],\n      page: 2\n    };\n  } //this function is used to change the state of the interview\n\n\n  async componentDidMount() {\n    const login = await fetch('/isAuthenticated', {\n      method: 'post',\n      withCredentials: true\n    });\n    const isLoggedInState = await login.json();\n    console.log(isLoggedInState);\n\n    if (isLoggedInState) {\n      this.getInterviews();\n      this.getStudents();\n      this.setState({\n        isLoggedIn: isLoggedInState\n      });\n    }\n  } //function to login the user\n\n\n  async getStudents() {\n    const trystudents = await fetch('/students/list', {\n      method: 'post',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    let students = await trystudents.json();\n    students = JSON.parse(students);\n    console.log(typeof students);\n    this.setState({\n      loading: false,\n      students\n    });\n  } //addInterview function\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ToastContainer, {\n      position: \"bottom-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Navbar, {\n      setpage: this.setpage,\n      logout: this.logout,\n      isLoggedIn: this.state.isLoggedIn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"condition-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    }, this.state.isLoggedIn && this.state.page == 1 && /*#__PURE__*/React.createElement(MainContent2, {\n      addInterview: this.addInterview,\n      students: this.state.students,\n      addstudent: this.addstudent,\n      notify: this.notify,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 63\n      }\n    }), this.state.isLoggedIn && this.state.page == 2 && /*#__PURE__*/React.createElement(InterviewList, {\n      notify: this.notify,\n      changeIntState: this.changeIntState,\n      students: this.state.students,\n      interviews: this.state.interviews,\n      createInterview: this.createInterview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 63\n      }\n    }), this.state.isLoggedIn === false && /*#__PURE__*/React.createElement(MainContent, {\n      notify: this.notify,\n      login: this.login,\n      register: this.register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 47\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/anuragsingh/Desktop/interbase/client/src/components/App.js"],"names":["React","Navbar","MainContent","MainContent2","InterviewList","ToastContainer","toast","App","Component","constructor","changeIntState","student_id","interview_id","oldstate","newstate","console","log","changeState","fetch","method","body","JSON","stringify","headers","changeStateResult","json","message","notify","getInterviews","createInterview","company","date","tryCreateInterview","createdInterview","interview","tryGetInterviews","interviews","setState","setpage","page","type","error","success","warn","login","username","password","trylogin","status","loginjson","isLoggedIn","register","repeatpassword","tryregister","tryregisterjson","logout","tryLogout","addstudent","name","batch","dsascore","wdscore","rescore","college","placed","newStudent","courseScores","DSA","WD","RE","getStudents","addInterview","id","state","studentId","students","_id","tryAdd","result","student","addedInterview","componentDidMount","withCredentials","isLoggedInState","trystudents","parse","loading","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Navbar from './Navbar';\nimport MainContent from './MainContent';\nimport MainContent2 from './MainContent2';\nimport InterviewList from './InterviewList';\nimport '../assets/css/App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n      students: [],\n      interviews: [],\n      page: 2\n    }\n  }\n\n  //this function is used to change the state of the interview\n  changeIntState = async (student_id, interview_id, oldstate, newstate) => {\n    console.log(oldstate + \" \" + newstate);\n    let changeState =await fetch('/interviews/changestate', {\n      method: 'post',\n      body: JSON.stringify({\n        student_id,\n        interview_id,\n        oldstate,\n        newstate\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n\n    let changeStateResult = await changeState.json();\n    if(changeStateResult.message=='success'){\n      this.notify('success','state change '+oldstate+'->'+newstate);\n      this.getInterviews();\n    }\n    else{\n      this.notify('error','State change failed');\n    }\n   \n\n  }\n\n  //this function creates Interview\n  createInterview = async (company, date) => {\n    if (company === \"\" || date === \"\") {\n      this.notify('error', 'Date or Company name empty');\n      return;\n    }\n    let tryCreateInterview = await fetch('/interviews/create', {\n      method: 'post',\n      body: JSON.stringify({\n        company,\n        date\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n\n    let createdInterview = await tryCreateInterview.json();\n    console.log(createdInterview.interview);\n    if (createdInterview.message == 'success') {\n      this.notify('success', 'New ' + company + ' Interview created!');\n      this.getInterviews();\n    }\n    else {\n      this.notify('error', 'Interview creation failed');\n    }\n\n  }\n\n  //this function gets all the interviews\n  getInterviews = async () => {\n    let tryGetInterviews = await fetch('/interviews/getlist', {\n      method: 'post',\n    })\n\n    let interviews = await tryGetInterviews.json();\n    console.log(interviews);\n    if (interviews.message == 'success') {\n      this.setState({\n        interviews: interviews.interviews\n      });\n    }\n\n  }\n  //this function sets the page\n  setpage = (page) => {\n    this.setState({\n      page\n    })\n  }\n\n  //function to create notification\n  notify = (type, message) => {\n    switch (type) {\n      case 'error': {\n        toast.error(message);\n        break;\n      }\n      case 'success': {\n        toast.success(message);\n        break;\n      }\n      case 'warn': {\n        toast.warn(message);\n        break;\n      }\n    }\n  };\n\n  async componentDidMount() {\n    const login = await fetch('/isAuthenticated', { method: 'post', withCredentials: true });\n    const isLoggedInState = await login.json();\n    console.log(isLoggedInState);\n    if (isLoggedInState) {\n      this.getInterviews();\n      this.getStudents();\n      this.setState({\n        isLoggedIn: isLoggedInState,\n      })\n    }\n  }\n\n\n\n  //function to login the user\n  login = async (username, password) => {\n    const trylogin = await fetch('/login', {\n      method: 'post',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n\n    if (trylogin.status === 401) {\n      this.notify('error', 'Invalid username password!');\n    }\n    else {\n      const loginjson = await trylogin.json();\n      console.log(loginjson);\n      if (loginjson.isLoggedIn == true) {\n        this.notify('success', 'Welcome back :)');\n        this.setState({\n          isLoggedIn: true\n        })\n      }\n    }\n  }\n\n  //this fucntion sends ajax call to register a new User\n  register = async (username, password, repeatpassword) => {\n    console.log(username, password, repeatpassword);\n    if (password !== repeatpassword) {\n      this.notify('warn', 'Passwords do not match');\n    }\n    else {\n      const tryregister = await fetch('/register', {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          password\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      })\n\n      const tryregisterjson = await tryregister.json();\n      if (tryregisterjson.message === \"success\") {\n        this.notify('success', 'New registration successfull :)');\n      }\n      else if (tryregisterjson.message === \"error\") {\n        this.notify('error', 'New registration failed :/');\n      }\n      else if (tryregisterjson.message == \"username already occupied\") {\n        this.notify('warn', 'Username already taken :/');\n      }\n    }\n  }\n  //this function send logout request\n  logout = () => {\n    const tryLogout = fetch('/logout', {\n      method: 'post'\n    });\n    this.notify('success', 'Goodbye :)');\n    this.setState({\n      isLoggedIn: false\n    })\n  }\n\n  addstudent = async (name, batch, dsascore, wdscore, rescore, college, placed) => {\n    let newStudent = await fetch('/students/add', {\n      method: 'post',\n      body: JSON.stringify({\n        name,\n        batch,\n        courseScores: {\n          DSA: dsascore,\n          WD: wdscore,\n          RE: rescore\n        },\n        college,\n        placed\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n\n    console.log(newStudent);\n    newStudent = await newStudent.json();\n    if (newStudent.message == \"success\") {\n      this.notify('success', 'New student added');\n      this.getStudents();\n    }\n    else {\n      this.notify('error', 'Adding student failed');\n    }\n  }\n\n  async getStudents() {\n    const trystudents = await fetch('/students/list', {\n      method: 'post',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    let students = await trystudents.json();\n    students = JSON.parse(students);\n    console.log(typeof (students));\n    this.setState({ loading: false, students })\n  }\n\n  //addInterview function\n  addInterview = async (id, company, date, state) => {\n    let studentId = this.state.students[id]._id;\n    console.log(studentId, company, date, state);\n\n    let tryAdd = await fetch('/interviews/add', {\n      method: 'post',\n      body: JSON.stringify({\n        company,\n        result: state,\n        date,\n        student: studentId\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    let addedInterview = await tryAdd.json();\n\n    if (addedInterview.message == \"success\") {\n      this.notify('success', 'New Interview Added');\n      this.getStudents();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ToastContainer position=\"bottom-left\" />\n        <Navbar setpage={this.setpage} logout={this.logout} isLoggedIn={this.state.isLoggedIn} />\n        <div className=\"condition-div\">\n          {(this.state.isLoggedIn && this.state.page == 1) && <MainContent2 addInterview={this.addInterview} students={this.state.students} addstudent={this.addstudent} notify={this.notify} />}\n          {(this.state.isLoggedIn && this.state.page == 2) && <InterviewList notify={this.notify} changeIntState={this.changeIntState}  students={this.state.students} interviews={this.state.interviews} createInterview={this.createInterview} />}\n          {this.state.isLoggedIn === false && <MainContent notify={this.notify} login={this.login} register={this.register} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}